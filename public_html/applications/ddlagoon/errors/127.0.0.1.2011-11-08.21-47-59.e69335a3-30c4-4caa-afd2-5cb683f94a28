(dp1
S'output'
p2
S''
sS'layer'
p3
S'C:\\Users\\Thomas\\Dropbox\\appz\\2011\\ddlagoon\\public_html\\applications\\ddlagoon\\models\\db.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\nimport re\nfrom applications.ddlagoon import pathutils\n\nif False:\n    from gluon.dal import Field, DAL\n    from gluon.contrib.pysimplesoap.server import request\n    from gluon.contrib.pysimplesoap.client import response\n\nif not request.env.web2py_runtime_gae:     \n    ## if NOT running on Google App Engine use SQLite or other DB\n    #db = DAL(\'sqlite://storage.sqlite\')\n    db = DAL(\'mysql://ddlagoon:YWQ20u77@ddlagoon.mysql.fluxflex.com/ddlagoon\')\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore\') \n    ## store sessions and tickets there\n    session.connect(request, response, db = db) \n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db, hmac_key=Auth.get_or_create_key())\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\ndef generateNickname():\n    import random\n    return \'DDLagoonFan%d\' % random.randint(1,1e10)\n\ndef generateUploaderKey():\n    #from Crypto.Random import random\n    import random\n    from datetime import datetime\n    from hashlib import sha256, md5\n    return md5(sha256(str(random.getrandbits(256))).digest()+str(datetime.now().isoformat())).hexdigest()\n\ndef getCurrentTime():\n    from datetime import datetime\n    return datetime.now()\n\n## create all tables needed by auth if not custom tables\nauth.settings.extra_fields[\'auth_user\']= [\n    Field(\'nickname\', \'string\', length=128, unique=True, default=generateNickname()),\n    Field(\'allow_porn\', \'boolean\', writable=False, readable=False, default=False),\n    Field(\'uploader_key\', \'string\', writable=False, default=generateUploaderKey()),\n    Field(\'is_uploader\', \'boolean\', writable=False, readable=False, default=False)\n    #Field(\'birthday\', \'date\', default=date.today()),\n    #Field(\'of_age\', \'boolean\', compute=lambda r: ((date.today()-r.birthday) > timedelta(hours=18)))\n]\n\nauth.settings.register_onvalidation = generateNickname\nauth.settings.create_user_groups = False\nauth.define_tables()\ndb.auth_user.email.writable = False\ndb.auth_user.first_name.writable = False\ndb.auth_user.last_name.writable = False\ndb.auth_user.email.readable = False\ndb.auth_user.first_name.readable = False\ndb.auth_user.last_name.readable = False\n\n# The categories\ndb.define_table(\'category\',\n    Field(\'category_title\', notnull=True),\n    Field(\'category_description\', \'text\'),\n    Field(\'category_parent\', \'reference category\', default=None),\n    format=\'%(category_title)s (%(category_parent)s) (%(id)s)\'\n)\n\n# The DDLz\ndb.define_table(\'ddl\',\n    Field(\'filename\', required=True, notnull=True),\n    Field(\'author\'),\n    Field(\'description\'),\n    Field(\'web_description\', \'text\'),\n    Field(\'size\', \'integer\', required=True, notnull=True),\n    Field(\'hash\', required=True, notnull=True),\n    Field(\'parts\', \'integer\', required=True, notnull=True),\n    Field(\'service\', required=True, notnull=True),\n    Field(\'links\', "text", required=True, notnull=True),\n    Field(\'version\', \'double\', required=True, notnull=True),\n    Field(\'date_created\', \'datetime\', required=False),\n    Field(\'uploader\', \'reference auth_user\', required=True, notnull=True),\n    Field(\'date_added\', \'datetime\', default=getCurrentTime()),\n    Field(\'category\', \'reference category\'),\n    Field(\'last_time_downloaded\', \'datetime\'),\n    Field(\'times_downloaded\', \'integer\', default=0),\n    Field(\'karma_pos\', \'integer\', default=0),\n    Field(\'karma_neg\', \'integer\', default=0),\n    Field(\'reported\', \'integer\', default=0),\n    Field(\'size_readable\', compute=lambda r: pathutils.formatbytes(r[\'size\'])),\n    Field(\'filename_url\', compute=lambda r: re.sub(\'[^A-Za-z0-9_ .-]+\', \'\', r[\'filename\']).replace(" ","_"))\n)\n\n# Record the downloads\ndb.define_table(\'ddl_downloaded\',\n    Field(\'ddl\', \'reference ddl\', required=True, notnull=True),\n    Field(\'downloader\', \'reference auth_user\', required=True, notnull=True),\n    Field(\'download_time\', \'datetime\', required=True, notnull=True)\n)\n\n## configure email\nmail=auth.settings.mailer\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'\nmail.settings.sender = \'you@gmail.com\'\nmail.settings.login = \'username:password\'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth,filename=\'private/janrain.key\', )\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "C:\\Users\\Thomas\\Dropbox\\appz\\2011\\ddlagoon\\public_html\\gluon\\restricted.py", line 194, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Thomas\\Dropbox\\appz\\2011\\ddlagoon\\public_html\\applications\\ddlagoon\\models\\db.py", line 74, in <module>\n    auth.define_tables()\n  File "C:\\Users\\Thomas\\Dropbox\\appz\\2011\\ddlagoon\\public_html\\gluon\\tools.py", line 1256, in define_tables\n    format=\'%(first_name)s %(last_name)s (%(id)s)\'))\n  File "C:\\Users\\Thomas\\Dropbox\\appz\\2011\\ddlagoon\\public_html\\gluon\\dal.py", line 4491, in define_table\n    polymodel=polymodel)\n  File "C:\\Users\\Thomas\\Dropbox\\appz\\2011\\ddlagoon\\public_html\\gluon\\dal.py", line 677, in create_table\n    self.create_sequence_and_triggers(query,table)\n  File "C:\\Users\\Thomas\\Dropbox\\appz\\2011\\ddlagoon\\public_html\\gluon\\dal.py", line 1299, in create_sequence_and_triggers\n    self.execute(query)\n  File "C:\\Users\\Thomas\\Dropbox\\appz\\2011\\ddlagoon\\public_html\\gluon\\dal.py", line 1309, in execute\n    return self.log_execute(*a, **b)\n  File "C:\\Users\\Thomas\\Dropbox\\appz\\2011\\ddlagoon\\public_html\\gluon\\dal.py", line 1304, in log_execute\n    ret = self.cursor.execute(*a,**b)\n  File "C:\\Users\\Thomas\\Dropbox\\appz\\2011\\ddlagoon\\public_html\\gluon\\contrib\\pymysql\\cursors.py", line 108, in execute\n    self.errorhandler(self, exc, value)\n  File "C:\\Users\\Thomas\\Dropbox\\appz\\2011\\ddlagoon\\public_html\\gluon\\contrib\\pymysql\\connections.py", line 184, in defaulterrorhandler\n    raise errorclass, errorvalue\nInternalError: (1050, u"Table \'auth_user\' already exists")\n'
p10
s.